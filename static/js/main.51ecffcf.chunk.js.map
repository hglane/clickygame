{"version":3,"sources":["logo.svg","components/PictureCard/PictureCard.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","PictureCard","props","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","topScore","score","message","shakeit","shuffledArray","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","logo","this","map","picture","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.51ecffcf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./PictureCard.css\";\r\n\r\nconst PictureCard = props => (\r\n    <div className=\"card\">\r\n        <div className=\"img-container\">\r\n            <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default PictureCard; ","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\r\n\r\nexport default Wrapper; ","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PictureCard from \"./components/PictureCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\n\n\nclass App extends Component {\n  state = {\n    cards,\n    clickedArray: [],\n    topScore: 0,\n    score: 0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n\n  clickPicture = id => {\n\n    const shuffledArray = this.shuffleArray(cards);\n    this.setState({ cards: shuffledArray });\n\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"Incorrect! Game Over. Click an image to start again!\", shakeit: \"true\" });\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"Correct!\",\n        shakeit: \"false\"\n      });\n    }\n\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n  }\n\n  shuffleArray = (picturesArray) => {\n    for (let i = picturesArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\n    }\n    return picturesArray;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to the MLB React Clicky Game!</h1>\n        </header>\n        <div className=\"App-intro-div\">\n          <h3 className=\"App-intro\">\n            <strong>Click on a team to earn points, but don't click on any more than once!</strong>\n            <p className=\"score\"><strong>Score: {this.state.score} | Top Score: {this.state.topScore}</strong></p>\n            <p className=\"message\"><strong>{this.state.message}</strong></p>\n          </h3>\n        </div>\n        <Wrapper\n          shakeWrapper={this.state.shakeit}\n          pictures=\n          {this.state.cards.map(picture => (\n            <PictureCard\n              clickPicture={this.clickPicture}\n              id={picture.id}\n              name={picture.name}\n              image={picture.image}\n            />\n          ))}\n        />\n        <footer className=\"footer\">\n          <div className=\"container\">\n            <span className=\"text-muted\">Harris's Clicky Game - Week 19</span>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}